box: python:2.7
build:
  steps:
    # A step that sets up the python virtual environment
    - virtualenv:
        name: setup virtual environment
        install_wheel: false # Enable wheel to speed up builds (experimental)

    # # Use this virtualenv step for python 3.2
    # - virtualenv
    #     name: setup virtual environment
    #     python_location: /usr/bin/python3.2

    # A step that executes `pip install` command.
    - pip-install

    # # This pip-install clears the local wheel cache
    # - pip-install:
    #     clean_wheel_dir: true

    # A custom script step, name value is used in the UI
    # and the code value contains the command that get executed
    - script:
        name: notify bitbucket that the build is in progress
        code: |
          JSON="{\"state\": \"INPROGRESS\",\"key\": \"WERCKER_BUILD\",\"name\": \"wall-e tests\",\"url\": \"$WERCKER_BUILD_URL\",\"description\": \"Building $WERCKER_GIT_BRANCH...\"}"
          curl -u $USER_NAME:$USER_PWD -H "Content-Type: application/json" -X POST https://api.bitbucket.org/2.0/repositories/scality/wall-e/commit/$WERCKER_GIT_COMMIT/statuses/build -d "$JSON"
    - script:
        name: flake8 checks
        code: |
          flake8 *.py
    - script:
        name: run tests
        code: |
          coverage run test_wall_e.py --failfast -v $WALL_E_PWD $EVE_PWD $USER_NAME $USER_PWD $USER_MAIL
          coverage report
          coverage html

  after-steps:
    - script:
        name: notify bitbucket that the build is over
        code: |
          if [ "$WERCKER_RESULT" = "passed" ]; then STATE="SUCCESSFUL"; else STATE="FAILED"; fi
          JSON="{\"state\": \"$STATE\",\"key\": \"WERCKER_BUILD\",\"name\": \"wall-e tests\",\"url\": \"$WERCKER_BUILD_URL\",\"description\": \"Tests $WERCKER_RESULT in step $WERCKER_FAILED_STEP_DISPLAY_NAME. $WERCKER_FAILED_STEP_MESSAGE\"}"
          curl -u $USER_NAME:$USER_PWD -H "Content-Type: application/json" -X POST https://api.bitbucket.org/2.0/repositories/scality/wall-e/commit/$WERCKER_GIT_COMMIT/statuses/build -d "$JSON"



